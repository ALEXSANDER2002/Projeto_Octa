<!DOCTYPE html>
<html lang="pt-br">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <meta http-equiv="Content-Security-Policy" content="
        default-src 'self';
        script-src 'self' 'unsafe-inline' https://cdn.jsdelivr.net https://cdnjs.cloudflare.com https://*.mercadopago.com https://secure.mlstatic.com https://http2.mlstatic.com;
        connect-src 'self' https://api.mercadopago.com https://*.mercadopago.com https://api.mercadolibre.com https://www.mercadolibre.com https://*.mlstatic.com;
        frame-src 'self' https://*.mercadopago.com https://www.mercadolibre.com;
        img-src 'self' data: https://*.mercadopago.com https://*.mlstatic.com https://*.mercadolibre.com https://www.mercadolibre.com https://www.mercadolivre.com https://cdn-icons-png.flaticon.com;
        style-src 'self' 'unsafe-inline' https://cdnjs.cloudflare.com https://fonts.googleapis.com;
        font-src 'self' https://cdnjs.cloudflare.com https://fonts.gstatic.com">
    <title>Loja - Atlética Octa Core</title>
    
    <!-- CSS Files -->
    <link rel="stylesheet" href="/CSS/loja.css">
    <link rel="stylesheet" href="/CSS/header.css">
    <link rel="stylesheet" href="/CSS/footer.css">
    <link rel="stylesheet" href="/CSS/whatsapp.css">
    <link rel="stylesheet" href="/CSS/titulo.css">
    <link rel="stylesheet" href="/CSS/default.css">
    <link rel="stylesheet" href="/CSS/toast.css">
    <link rel="stylesheet" href="/CSS/responsive-advanced.css">
    
    <!-- Font Awesome para ícones -->
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css">
    
    <!-- SDK MercadoPago.js -->
    <script src="https://sdk.mercadopago.com/js/v2"></script>
    
    <!-- Preload critical resources -->
    <link rel="preload" href="/js/toast.js" as="script">
    
    <!-- Meta tags para performance -->
    <meta name="description" content="Loja oficial da Atlética Octa Core - Produtos exclusivos">
    <meta name="keywords" content="atlética, octa core, loja, produtos">
    <meta name="author" content="Atlética Octa Core">
    
    <!-- Open Graph -->
    <meta property="og:title" content="Loja - Atlética Octa Core">
    <meta property="og:description" content="Produtos exclusivos da Atlética Octa Core">
    <meta property="og:type" content="website">
    
    <!-- Performance hints -->
    <link rel="dns-prefetch" href="//fonts.googleapis.com">
    <link rel="dns-prefetch" href="//api.mercadopago.com">

    <style>
        /* Modal de Pagamento */
        .modal {
            display: none;
            position: fixed;
            z-index: 1000;
            left: 0;
            top: 0;
            width: 100%;
            height: 100%;
            overflow: auto;
            background-color: rgba(0, 0, 0, 0.5);
            backdrop-filter: blur(5px);
        }

        .modal-content {
            background-color: #fefefe;
            margin: 5% auto;
            padding: 30px;
            border: none;
            border-radius: 15px;
            width: 90%;
            max-width: 600px;
            box-shadow: 0 10px 30px rgba(0, 0, 0, 0.3);
            position: relative;
        }

        .close {
            position: absolute;
            right: 20px;
            top: 15px;
            font-size: 28px;
            font-weight: bold;
            color: #aaa;
            cursor: pointer;
            transition: color 0.3s;
        }

        .close:hover {
            color: #333;
        }

        .produto-info {
            display: flex;
            align-items: center;
            background: #f8f9fa;
            padding: 20px;
            border-radius: 12px;
            margin-bottom: 30px;
            gap: 20px;
        }

        .produto-info img {
            width: 100px;
            height: 100px;
            object-fit: cover;
            border-radius: 8px;
        }

        .produto-info h3 {
            margin: 0 0 8px 0;
            color: #333;
            font-size: 18px;
        }

        .produto-info p {
            margin: 0;
            color: #28a745;
            font-weight: bold;
            font-size: 20px;
        }

        .payment-methods {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
            gap: 20px;
            margin: 30px 0;
        }

        .payment-method {
            background: #fff;
            border: 2px solid #e0e0e0;
            border-radius: 12px;
            padding: 20px;
            text-align: center;
            cursor: pointer;
            transition: all 0.3s ease;
        }

        .payment-method:hover {
            border-color: #007bff;
            transform: translateY(-2px);
            box-shadow: 0 4px 12px rgba(0,0,0,0.1);
        }

        .payment-method.selected {
            border-color: #007bff;
            background-color: #f8f9ff;
        }

        .payment-method i {
            font-size: 32px;
            color: #007bff;
            margin-bottom: 15px;
        }

        .payment-method h4 {
            margin: 0;
            color: #333;
            font-size: 18px;
        }

        .payment-method p {
            margin: 8px 0 0;
            color: #666;
            font-size: 14px;
        }

        #payment-forms > div {
            display: none;
        }

        .form-group {
            margin-bottom: 20px;
        }

        .form-group label {
            display: block;
            margin-bottom: 8px;
            color: #333;
            font-weight: 500;
        }

        .form-control {
            width: 100%;
            padding: 12px;
            border: 1px solid #ddd;
            border-radius: 8px;
            font-size: 16px;
            transition: border-color 0.3s;
        }

        .form-control:focus {
            border-color: #007bff;
            outline: none;
            box-shadow: 0 0 0 2px rgba(0,123,255,0.25);
        }

        .btn-primary {
            background: #007bff;
            color: #fff;
            border: none;
            border-radius: 8px;
            padding: 15px 30px;
            font-size: 16px;
            font-weight: 600;
            width: 100%;
            cursor: pointer;
            transition: all 0.3s;
            display: flex;
            align-items: center;
            justify-content: center;
            gap: 10px;
        }

        .btn-primary:hover {
            background: #0056b3;
            transform: translateY(-1px);
        }

        .btn-primary i {
            font-size: 18px;
        }

        .pix-container {
            text-align: center;
            padding: 20px;
            background: #f8f9fa;
            border-radius: 12px;
        }

        .pix-container .form-group {
            margin-bottom: 20px;
            text-align: left;
        }

        .pix-container .form-group label {
            display: block;
            margin-bottom: 8px;
            color: #333;
            font-weight: 500;
        }

        .pix-container .form-group input {
            width: 100%;
            padding: 12px;
            border: 1px solid #ddd;
            border-radius: 8px;
            font-size: 16px;
            transition: border-color 0.3s;
        }

        .pix-container .form-group input:focus {
            border-color: #007bff;
            outline: none;
            box-shadow: 0 0 0 2px rgba(0,123,255,0.25);
        }

        .pix-steps {
            list-style: none;
            padding: 0;
            margin: 20px 0;
            text-align: left;
        }

        .pix-steps li {
            display: flex;
            align-items: center;
            margin-bottom: 15px;
            color: #555;
        }

        .pix-steps li i {
            margin-right: 10px;
            color: #007bff;
        }

        #pix-qrcode {
            margin: 20px 0;
        }

        #pix-qrcode img {
            max-width: 200px;
            margin-bottom: 15px;
        }

        .copy-button {
            background: #fff;
            border: 1px solid #007bff;
            color: #007bff;
            padding: 8px 15px;
            border-radius: 6px;
            cursor: pointer;
            transition: all 0.3s;
            display: inline-flex;
            align-items: center;
            gap: 5px;
        }

        .copy-button:hover {
            background: #007bff;
            color: #fff;
        }

        @media (max-width: 768px) {
            .modal-content {
                margin: 0;
                height: 100%;
                max-width: 100%;
                border-radius: 0;
            }

            .produto-info {
                flex-direction: column;
                text-align: center;
            }

            .produto-info img {
                width: 150px;
                height: 150px;
            }
        }

        /* Status do Pagamento */
        #payment-status {
            margin-top: 20px;
        }

        .alert {
            padding: 15px;
            margin-bottom: 20px;
            border: 1px solid transparent;
            border-radius: 8px;
            display: flex;
            align-items: center;
            gap: 10px;
            font-size: 14px;
            font-weight: 500;
        }

        .alert i {
            font-size: 18px;
            flex-shrink: 0;
        }

        .alert-success {
            color: #155724;
            background-color: #d4edda;
            border-color: #c3e6cb;
        }

        .alert-success i {
            color: #28a745;
        }

        .alert-error,
        .alert-danger {
            color: #721c24;
            background-color: #f8d7da;
            border-color: #f5c6cb;
        }

        .alert-error i,
        .alert-danger i {
            color: #dc3545;
        }

        .alert-warning {
            color: #856404;
            background-color: #fff3cd;
            border-color: #ffeaa7;
        }

        .alert-warning i {
            color: #ffc107;
        }

        .alert-info {
            color: #0c5460;
            background-color: #d1ecf1;
            border-color: #bee5eb;
        }

        .alert-info i {
            color: #17a2b8;
        }

        /* Melhorias no formulário de cartão */
        .row {
            display: flex;
            gap: 15px;
            margin: 0 -7.5px;
        }

        .col-6 {
            flex: 1;
            padding: 0 7.5px;
        }

        .form-group {
            margin-bottom: 20px;
        }

        .form-group label {
            display: block;
            margin-bottom: 8px;
            color: #333;
            font-weight: 500;
            font-size: 14px;
        }

        .form-control {
            width: 100%;
            padding: 12px 15px;
            border: 1px solid #ddd;
            border-radius: 8px;
            font-size: 16px;
            transition: all 0.3s ease;
            background: #fff;
            box-sizing: border-box;
        }

        .form-control:focus {
            border-color: #007bff;
            outline: none;
            box-shadow: 0 0 0 3px rgba(0,123,255,0.1);
        }

        .form-control:invalid {
            border-color: #dc3545;
        }

        .form-control:valid {
            border-color: #28a745;
        }

        select.form-control {
            cursor: pointer;
        }

        /* Estilos específicos para campos do Mercado Pago */
        #form-checkout__cardNumber,
        #form-checkout__expirationDate,
        #form-checkout__securityCode {
            border: 1px solid #ddd;
            border-radius: 8px;
            padding: 0;
            min-height: 48px;
            background: #fff;
        }

        #form-checkout__cardNumber iframe,
        #form-checkout__expirationDate iframe,
        #form-checkout__securityCode iframe {
            border: none;
            width: 100%;
            height: 48px;
        }

        /* Validação visual */
        .field-error {
            border-color: #dc3545 !important;
            box-shadow: 0 0 0 3px rgba(220,53,69,0.1) !important;
        }

        .field-success {
            border-color: #28a745 !important;
            box-shadow: 0 0 0 3px rgba(40,167,69,0.1) !important;
        }

        /* Loading states */
        .form-control:disabled {
            background-color: #f8f9fa;
            opacity: 0.6;
            cursor: not-allowed;
        }

        .btn-primary:disabled {
            background: #6c757d;
            cursor: not-allowed;
            transform: none;
        }

        .btn-primary:disabled:hover {
            background: #6c757d;
            transform: none;
        }
    </style>
</head>
<body>
<!-- Importando o header -->
<%- include('partials/header') %>

<div class="container-responsive">
    <h1 class="fade-in">LOJA</h1>

    <div class="grid-responsive" id="produtos-container">
        <% if (typeof produtos !== 'undefined' && produtos.length > 0) { %>
            <% produtos.forEach(function(produto, index) { %>
                <div class="card-loja" data-animation-delay="<%= index * 0.1 %>">
                    <div class="image-placeholder">
                        <img src="<%= produto.imagem %>" alt="<%= produto.nome %>">
                    </div>
                    <h2><%= produto.nome %></h2>
                    <div class="price">
                        <% if (produto.precoAntigo) { %>
                            <span class="old-price">R$ <%= produto.precoAntigo.toFixed(2).replace('.', ',') %></span>
                        <% } %>
                        <span class="new-price">R$ <%= produto.precoNovo.toFixed(2).replace('.', ',') %></span>
                    </div>
                    <button class="btn btn-comprar" 
                            data-produto-nome="<%= produto.nome %>"
                            data-produto-preco="<%= produto.precoNovo.toFixed(2) %>"
                            data-produto-imagem="<%= produto.imagem %>">
                        Comprar
                    </button>
                </div>
            <% }); %>
        <% } else { %>
            <!-- Skeleton loading para quando não há produtos -->
            <div class="skeleton-card">
                <div class="skeleton skeleton-image"></div>
                <div class="skeleton skeleton-title"></div>
                <div class="skeleton skeleton-price"></div>
                <div class="skeleton skeleton-button"></div>
            </div>
            <div class="skeleton-card">
                <div class="skeleton skeleton-image"></div>
                <div class="skeleton skeleton-title"></div>
                <div class="skeleton skeleton-price"></div>
                <div class="skeleton skeleton-button"></div>
            </div>
            <div class="skeleton-card">
                <div class="skeleton skeleton-image"></div>
                <div class="skeleton skeleton-title"></div>
                <div class="skeleton skeleton-price"></div>
                <div class="skeleton skeleton-button"></div>
            </div>
        <% } %>
    </div>
</div>

<!-- Modal de Pagamento -->
<div id="modalPagamento" class="modal">
    <div class="modal-content">
        <span class="close" role="button" aria-label="Fechar">&times;</span>
        <h2>Finalizar Compra</h2>

        <!-- Informações do Produto -->
        <div class="produto-info">
            <img id="produto-imagem" src="" alt="">
            <div>
                <h3 id="produto-nome"></h3>
                <p id="produto-preco"></p>
            </div>
        </div>

        <!-- Métodos de Pagamento -->
        <h3>Escolha como deseja pagar</h3>
        <div class="payment-methods">
            <div class="payment-method" data-method="credit" role="button" tabindex="0">
                <i class="fas fa-credit-card"></i>
                <h4>Cartão de Crédito</h4>
                <p>Até 12x sem juros</p>
            </div>
            <div class="payment-method" data-method="pix" role="button" tabindex="0">
                <i class="fas fa-qrcode"></i>
                <h4>PIX</h4>
                <p>Pagamento instantâneo</p>
            </div>
        </div>

        <!-- Formulários de Pagamento -->
        <div id="payment-forms">
            <!-- Formulário de Cartão -->
            <div id="credit-form" style="display: none;">
                <form id="form-checkout">
                    <div class="form-group">
                        <label>Número do Cartão</label>
                        <div id="form-checkout__cardNumber" class="form-control"></div>
                    </div>

                    <div class="row">
                        <div class="col-6">
                            <div class="form-group">
                                <label>Validade</label>
                                <div id="form-checkout__expirationDate" class="form-control"></div>
                            </div>
                        </div>
                        <div class="col-6">
                            <div class="form-group">
                                <label>CVV</label>
                                <div id="form-checkout__securityCode" class="form-control"></div>
                            </div>
                        </div>
                    </div>

                    <div class="form-group">
                        <label>Nome no Cartão</label>
                        <input type="text" id="form-checkout__cardholderName" class="form-control"/>
                    </div>

                    <div class="form-group">
                        <label>Banco Emissor</label>
                        <select id="form-checkout__issuer" class="form-control"></select>
                    </div>

                    <div class="form-group">
                        <label>Parcelas</label>
                        <select id="form-checkout__installments" class="form-control"></select>
                    </div>

                    <div class="form-group">
                        <label>Tipo de Documento</label>
                        <select id="form-checkout__identificationType" class="form-control"></select>
                    </div>

                    <div class="form-group">
                        <label>Número do Documento</label>
                        <input type="text" id="form-checkout__identificationNumber" class="form-control"/>
                    </div>

                    <div class="form-group">
                        <label>E-mail</label>
                        <input type="email" id="form-checkout__email" class="form-control"/>
                    </div>

                    <button type="submit" class="btn-primary" id="form-checkout__submit">
                        <i class="fas fa-lock"></i>
                        Pagar com Cartão
                    </button>
                </form>
            </div>

            <!-- Formulário PIX -->
            <div id="pix-form" style="display: none;">
                <div class="pix-container">
                    <h4>Pagamento via PIX</h4>
                    <div class="form-group">
                        <label for="pix-email">Email para receber o comprovante</label>
                        <input type="email" id="pix-email" class="form-control" placeholder="Seu email" required>
                    </div>
                    <div class="pix-steps">
                        <li><i class="fas fa-mobile-alt"></i> Abra o app do seu banco</li>
                        <li><i class="fas fa-qrcode"></i> Escaneie o QR Code ou copie o código</li>
                        <li><i class="fas fa-check-circle"></i> Confirme o pagamento</li>
                    </div>
                    <button class="btn-primary" id="generate-pix-button">
                        <i class="fas fa-qrcode"></i>
                        Gerar QR Code PIX
                    </button>
                    <div id="pix-qrcode" style="display: none;">
                        <img id="pix-qrcode-image" src="" alt="QR Code PIX">
                        <div class="pix-code">
                            <input type="text" id="pix-code" readonly class="form-control">
                            <button class="copy-button" id="copy-pix-button">
                                <i class="fas fa-copy"></i>
                                Copiar código
                            </button>
                        </div>
                    </div>
                </div>
            </div>
        </div>

        <!-- Status do Pagamento -->
        <div id="payment-status" style="display: none;">
            <div class="alert" role="alert"></div>
        </div>
    </div>
</div>

<div class="loading" id="loadingOverlay">
    <div class="spinner"></div>
</div>

<%- include('partials/footer') %>
<%- include('partials/botao-whatsapp') %>

<!-- Scripts -->
<script src="/js/toast.js"></script>

<script>
// Inicialização do Mercado Pago
const mp = new MercadoPago('<%= process.env.MERCADO_PAGO_PUBLIC_KEY %>', {
    locale: 'pt-BR'
});

// Variáveis globais
let cardForm = null;

// Função para mostrar loading
function showLoading() {
    const loadingOverlay = document.getElementById('loadingOverlay');
    if (loadingOverlay) {
        loadingOverlay.style.display = 'flex';
    }
}

// Função para esconder loading
function hideLoading() {
    const loadingOverlay = document.getElementById('loadingOverlay');
    if (loadingOverlay) {
        loadingOverlay.style.display = 'none';
    }
}

// Função para mostrar o modal
function showModal() {
    const modal = document.getElementById('modalPagamento');
    if (modal) {
        modal.style.display = 'block';
        document.body.style.overflow = 'hidden'; // Impede scroll do body
    }
}

// Função para fechar o modal
function closeModal() {
    const modal = document.getElementById('modalPagamento');
    if (modal) {
        modal.style.display = 'none';
        document.body.style.overflow = ''; // Restaura scroll do body
        
        // Limpar seleção de métodos de pagamento
        document.querySelectorAll('.payment-method').forEach(el => {
            el.classList.remove('selected');
        });
        
        // Esconder todos os formulários e status
        document.getElementById('credit-form').style.display = 'none';
        document.getElementById('pix-form').style.display = 'none';
        document.getElementById('payment-status').style.display = 'none';
        document.getElementById('pix-qrcode').style.display = 'none';
        
        // Resetar formulários
        const creditFormEl = document.getElementById('form-checkout');
        if (creditFormEl) creditFormEl.reset();
        
        const pixEmailEl = document.getElementById('pix-email');
        if (pixEmailEl) pixEmailEl.value = '';

        const pixQrCodeImage = document.getElementById('pix-qrcode-image');
        if (pixQrCodeImage) pixQrCodeImage.src = '';
        const pixCodeInput = document.getElementById('pix-code');
        if (pixCodeInput) pixCodeInput.value = '';
        
        // Limpar mensagens de erro de campos
        document.querySelectorAll('.form-control, .form-checkout__control').forEach(input => {
            input.classList.remove('field-error', 'field-success');
        });
        
        // Destruir instância do cardForm se existir
        if (cardForm) {
            try {
                cardForm.unmount();
                console.log('Instância do CardForm desmontada.');
            } catch (e) {
                console.warn('Aviso ao desmontar cardForm:', e.message);
            } finally {
                cardForm = null;
            }
        }
        
        // Reabilitar botões
        const submitButton = document.getElementById('form-checkout__submit');
        if (submitButton) submitButton.disabled = false;
        const pixButton = document.getElementById('generate-pix-button');
        if (pixButton) pixButton.disabled = false;

        console.log('✅ Modal fechado e estado resetado.');
    }
}

// Função para selecionar método de pagamento
function selectPaymentMethod(method) {
    console.log('Método selecionado:', method);
    
    // Remover seleção anterior
    document.querySelectorAll('.payment-method').forEach(el => {
        el.classList.remove('selected');
    });

    // Esconder todos os formulários
    document.getElementById('credit-form').style.display = 'none';
    document.getElementById('pix-form').style.display = 'none';

    // Selecionar o método atual
    const selectedMethod = document.querySelector(`[data-method="${method}"]`);
    if (selectedMethod) {
        selectedMethod.classList.add('selected');
    }

    // Mostrar formulário apropriado e limpar status de pagamento anterior
    document.getElementById('payment-status').style.display = 'none';

    if (method === 'credit') {
        document.getElementById('credit-form').style.display = 'block';
        initializeCreditCardForm(); // Renomeada para clareza
    } else if (method === 'pix') {
        document.getElementById('pix-form').style.display = 'block';
    }
}

// Inicializar elementos do formulário
async function initializeCreditCardForm() { // Renomeada de initializeForm para initializeCreditCardForm
    try {
        console.log('🔄 Inicializando formulário de cartão de crédito...');
        showLoading();
        
        // Destruir instância anterior se existir
        if (cardForm) {
            try {
                cardForm.unmount();
                console.log('Instância anterior do CardForm desmontada.');
            } catch (e) {
                console.warn('Aviso ao desmontar formulário anterior:', e.message);
            }
            cardForm = null;
        }
        
        // Limpar campos controlados pelo SDK do MP
        const cardNumberElement = document.getElementById('form-checkout__cardNumber');
        const expirationDateElement = document.getElementById('form-checkout__expirationDate');
        const securityCodeElement = document.getElementById('form-checkout__securityCode');
        
        if (cardNumberElement) cardNumberElement.innerHTML = '';
        if (expirationDateElement) expirationDateElement.innerHTML = '';
        if (securityCodeElement) securityCodeElement.innerHTML = '';

        // Obter preço do produto
        const productPriceText = document.getElementById('produto-preco').dataset.value;
        const productPrice = parseFloat(productPriceText);
        
        if (isNaN(productPrice) || productPrice <= 0) {
            console.error('Preço do produto inválido:', productPriceText);
            showPaymentStatus('error', 'Preço do produto inválido. Tente novamente.');
            hideLoading();
            return;
        }
        console.log('💵 Preço para o formulário:', productPrice.toString());

        // Criar campos do cartão
        cardForm = mp.cardForm({
            amount: productPrice.toString(),
            iframe: true,
            form: {
                id: "form-checkout", // ID do formulário
                cardNumber: { // ID do container do número do cartão
                    id: "form-checkout__cardNumber",
                    placeholder: "XXXX XXXX XXXX XXXX",
                },
                expirationDate: { // ID do container da data de validade
                    id: "form-checkout__expirationDate",
                    placeholder: "MM/YY",
                },
                securityCode: { // ID do container do código de segurança
                    id: "form-checkout__securityCode",
                    placeholder: "CVV",
                },
                cardholderName: { // ID do input do nome do titular
                    id: "form-checkout__cardholderName",
                    placeholder: "Nome como no cartão",
                },
                issuer: { // ID do select do banco emissor
                    id: "form-checkout__issuer",
                    placeholder: "Selecione o banco",
                },
                installments: { // ID do select de parcelas
                    id: "form-checkout__installments",
                    placeholder: "Selecione as parcelas",
                },
                identificationType: { // ID do select do tipo de documento
                    id: "form-checkout__identificationType",
                    placeholder: "Tipo",
                },
                identificationNumber: { // ID do input do número do documento
                    id: "form-checkout__identificationNumber",
                    placeholder: "Número do documento",
                },
                cardholderEmail: { // ID do input do email
                    id: "form-checkout__email", // Corrigido para corresponder ao HTML
                    placeholder: "seu@email.com",
                },
            },
            callbacks: {
                onFormMounted: error => {
                    hideLoading();
                    if (error) {
                        console.error('❌ Erro ao montar formulário:', error);
                        showPaymentStatus('error', 'Não foi possível carregar o formulário de pagamento. Verifique sua conexão ou tente mais tarde.');
                        return;
                    }
                    console.log('✅ Formulário de cartão montado.');
                },
                onSubmit: event => {
                    event.preventDefault();
                    console.log('💨 Formulário submetido via callback onSubmit.');
                    handleFormSubmit();
                },
                onFetching: (resource) => {
                    console.log("⏳ Carregando:", resource);
                    showLoading(); // Mostrar loading ao buscar recursos (ex: parcelas)
                    return () => {
                        hideLoading(); // Esconder loading após buscar
                    };
                },
                onCardTokenReceived: (error, token) => {
                    // Este callback é chamado se createCardToken for chamado SEM um callback próprio.
                    // No nosso caso, handleFormSubmit chama createCardToken e lida com o token.
                    // Manter para depuração ou cenários alternativos.
                    if (error) {
                        console.error('❌ Erro ao receber token (callback global):', error);
                        showPaymentStatus('error', 'Erro ao processar dados do cartão. Verifique os dados.');
                        hideLoading();
                        document.getElementById('form-checkout__submit').disabled = false;
                        return;
                    }
                    console.log('🔑 Token recebido (callback global):', token);
                    // Não processar pagamento aqui, pois handleFormSubmit faz isso.
                },
                onError: (errors) => {
                    hideLoading();
                    document.getElementById('form-checkout__submit').disabled = false;
                    console.error('❌ Erros no formulário (onError):', errors);
                    if (errors && errors.length > 0) {
                        // Tenta focar no primeiro campo com erro e mostrar mensagem
                        const firstError = errors[0];
                        showPaymentStatus('error', firstError.message || 'Verifique os dados do cartão.');
                        
                        // Destaque visual nos campos com erro (se o SDK fornecer 'cause')
                        errors.forEach(err => {
                            if (err.cause) {
                                const fieldId = `form-checkout__${err.cause}`;
                                const fieldElement = document.getElementById(fieldId);
                                if (fieldElement) {
                                     // Se for um campo iframe, o erro é no container
                                    fieldElement.classList.add('field-error');
                                } else {
                                    // Para inputs normais
                                    const normalInput = document.getElementById(`form-checkout__${err.field}`);
                                    if(normalInput) normalInput.classList.add('field-error');
                                }
                            }
                        });
                    } else {
                        showPaymentStatus('error', 'Erro desconhecido no formulário. Tente novamente.');
                    }
                },
                 onValidityChange: (error, field) => {
                    const fieldElement = document.getElementById(`form-checkout__${field}`);
                    if (fieldElement) { // Pode ser o container do iframe ou o input direto
                        if (error) {
                            fieldElement.classList.add('field-error');
                            fieldElement.classList.remove('field-success');
                            console.log(`🚩 Erro de validação no campo ${field}: ${error.message}`);
                        } else {
                            fieldElement.classList.remove('field-error');
                            fieldElement.classList.add('field-success');
                            console.log(`👍 Campo ${field} válido.`);
                        }
                    }
                }
            }
        });
        console.log('📜 Configuração do CardForm enviada para o SDK.');

        // Carregar tipos de documento após o formulário ser montado
        // O onFormMounted garante que o SDK está pronto.
        // No entanto, getIdentificationTypes é uma chamada separada.
        // Usar um pequeno delay pode ajudar se houver problemas de timing,
        // mas o ideal é que o SDK gerencie isso.
        // Vamos tentar carregar imediatamente após a criação do cardForm.
        try {
            const identificationTypes = await mp.getIdentificationTypes();
            const identificationTypeElement = document.getElementById('form-checkout__identificationType');
            if (identificationTypeElement && identificationTypes) {
                createSelectOptions(identificationTypeElement, identificationTypes, "Selecione o tipo");
                console.log('📄 Tipos de documento carregados.');
            } else {
                console.warn('⚠️ Elemento de tipo de documento ou dados não encontrados.');
            }
        } catch (error) {
            console.error('❌ Erro ao carregar tipos de documento:', error);
            // Não é um erro fatal para o formulário, mas é bom avisar.
            showPaymentStatus('warning', 'Não foi possível carregar os tipos de documento. Você ainda pode tentar pagar.');
        }

    } catch (error) {
        console.error('❌ Erro crítico ao inicializar formulário de cartão:', error);
        showPaymentStatus('error', 'Erro crítico ao carregar o formulário. Tente recarregar a página.');
        hideLoading();
    }
}

// Função para criar opções em selects
function createSelectOptions(selectElement, options, defaultPlaceholder) {
    if (!selectElement) {
        console.warn("Elemento select não fornecido para createSelectOptions");
        return;
    }
    
    selectElement.innerHTML = ''; // Limpa opções existentes

    if (defaultPlaceholder) {
        const placeholderOption = document.createElement('option');
        placeholderOption.value = "";
        placeholderOption.textContent = defaultPlaceholder;
        placeholderOption.disabled = true;
        placeholderOption.selected = true;
        selectElement.appendChild(placeholderOption);
    }

    options.forEach(option => {
        const optionElement = document.createElement('option');
        optionElement.value = option.id;
        optionElement.textContent = option.name;
        selectElement.appendChild(optionElement);
    });
}

// Função para processar envio do formulário de cartão
async function handleFormSubmit() {
    try {
        showLoading();
        document.getElementById('form-checkout__submit').disabled = true;
        document.getElementById('payment-status').style.display = 'none'; // Limpa status anterior
        console.log('🔄 Processando pagamento com cartão...');

        // Limpar classes de erro/sucesso dos campos antes de nova submissão
        document.querySelectorAll('#form-checkout .form-control, #form-checkout .form-checkout__control').forEach(input => {
            input.classList.remove('field-error', 'field-success');
        });

        // Validar se o cardForm está inicializado
        if (!cardForm) {
            console.error('Formulário de cartão não inicializado.');
            throw new Error('Formulário de cartão não inicializado. Por favor, selecione o método de pagamento novamente.');
        }

        // Obter dados do produto
        const productName = document.getElementById('produto-nome').textContent;
        const productPriceText = document.getElementById('produto-preco').dataset.value;
        const productPrice = parseFloat(productPriceText);
        
        if (isNaN(productPrice) || productPrice <= 0) {
            console.error('Preço do produto inválido na submissão:', productPriceText);
            throw new Error('Preço do produto inválido.');
        }

        // Validar campos manuais (não cobertos totalmente pelo onValidityChange ou SDK)
        const cardholderName = document.getElementById('form-checkout__cardholderName').value.trim();
        const email = document.getElementById('form-checkout__email').value.trim();
        const identificationType = document.getElementById('form-checkout__identificationType').value;
        const identificationNumber = document.getElementById('form-checkout__identificationNumber').value.trim();
        const issuer = document.getElementById('form-checkout__issuer').value;
        const installments = document.getElementById('form-checkout__installments').value;

        let manualValidationError = false;
        if (!cardholderName) {
            document.getElementById('form-checkout__cardholderName').classList.add('field-error');
            manualValidationError = true;
        }
        if (!email) {
            document.getElementById('form-checkout__email').classList.add('field-error');
            manualValidationError = true;
        } else {
            const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
            if (!emailRegex.test(email)) {
                document.getElementById('form-checkout__email').classList.add('field-error');
                manualValidationError = true;
                toastManager.error('Por favor, informe um email válido.'); // Feedback mais direto
            }
        }
        if (!identificationType) {
            document.getElementById('form-checkout__identificationType').classList.add('field-error');
            manualValidationError = true;
        }
        if (!identificationNumber) {
            document.getElementById('form-checkout__identificationNumber').classList.add('field-error');
            manualValidationError = true;
        }
         if (!issuer) { // issuer pode não ser obrigatório em todos os cenários, mas o SDK geralmente o requer
            const issuerEl = document.getElementById('form-checkout__issuer');
            // Verifica se há opções e se uma foi selecionada
            if (issuerEl.options.length > 1 && !issuerEl.value) { // >1 para contar com o placeholder
                 issuerEl.classList.add('field-error');
                 manualValidationError = true;
            }
        }
        if (!installments) {
            document.getElementById('form-checkout__installments').classList.add('field-error');
            manualValidationError = true;
        }

        if (manualValidationError) {
            throw new Error('Por favor, preencha todos os campos obrigatórios destacados.');
        }
        
        console.log('📄 Dados do formulário para tokenização:', {
            cardholderName, email, identificationType, identificationNumber, issuer, installments
        });

        // Criar o token do cartão através do cardForm
        // O SDK utiliza os valores dos inputs/selects configurados no `form` options.
        // Não é preciso passar os dados manualmente para createCardToken,
        // a menos que não esteja usando a configuração `form` do cardForm.
        const tokenData = await cardForm.createCardToken();
        
        // createCardToken pode retornar undefined se houver erros de validação já tratados pelo onError/onValidityChange
        if (!tokenData || !tokenData.id) { // MercadoPago SDK v2 usa tokenData.id
            console.error('❌ Falha ao gerar token do cartão. createCardToken retornou:', tokenData);
            // A mensagem de erro já deve ter sido exibida pelos callbacks do cardForm (onError)
            // Se não foi, é um erro inesperado.
            if (!document.querySelector('.alert-danger:visible')) { // Checa se já existe um erro visível
                 showPaymentStatus('error', 'Não foi possível validar os dados do cartão. Verifique as informações.');
            }
            throw new Error('Falha ao gerar token do cartão. Verifique os campos.'); // Para o fluxo
        }

        console.log('🔑 Token do cartão gerado:', tokenData.id);

        // Enviar dados para o servidor
        const paymentData = {
            token: tokenData.id, // Usar tokenData.id
            issuer_id: issuer, // Corrigido: issuer_id ao invés de issuerId
            payment_method_id: tokenData.payment_method_id, // Vem do tokenData
            transaction_amount: productPrice, // transaction_amount ao invés de amount
            installments: parseInt(installments),
            description: `Pagamento ${productName}`, // Descrição do pagamento
            payer: { // payer info
                email: email,
                identification: {
                    type: identificationType,
                    number: identificationNumber
                }
            },
            metadata: { // Adicionar metadados se necessário
                product_name: productName,
                // Outros dados relevantes
            }
            // Não enviar productData aninhado, a API espera os campos no nível raiz ou dentro de `payer` etc.
        };

        console.log('📤 Enviando dados do pagamento para o servidor:', JSON.stringify(paymentData, null, 2));

        const response = await fetch('/mercadopago/process_payment', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify(paymentData)
        });

        const result = await response.json();
        
        if (!response.ok) {
            throw new Error(result.error || 'Erro ao processar pagamento');
        }

        console.log('✅ Resposta do pagamento:', result);

        // Processar resposta baseada no status
        switch (result.status) {
            case 'approved':
                showPaymentStatus('success', 'Pagamento aprovado com sucesso!');
                setTimeout(() => {
                    closeModal();
                }, 3000);
                break;
            case 'pending':
                showPaymentStatus('warning', 'Pagamento pendente. Aguarde a confirmação.');
                break;
            case 'rejected':
                showPaymentStatus('error', `Pagamento rejeitado: ${result.status_detail || 'Verifique os dados do cartão'}`);
                break;
            default:
                showPaymentStatus('info', `Status do pagamento: ${result.status}`);
        }

    } catch (error) {
        console.error('❌ Erro no pagamento:', error);
        showPaymentStatus('error', error.message || 'Erro ao processar pagamento');
    } finally {
        hideLoading();
    }
}

// Função para mostrar status do pagamento
function showPaymentStatus(type, message) {
    const statusDiv = document.getElementById('payment-status');
    const alertDiv = statusDiv.querySelector('.alert');
    
    if (!statusDiv || !alertDiv) {
        console.error('Elementos de status (payment-status ou .alert) não encontrados no DOM.');
        // Fallback para toast se o container de status não existir
        if (typeof toastManager !== 'undefined') {
            toastManager[type === 'error' ? 'error' : (type || 'info')](message);
        }
        return;
    }

    // Definir classes baseadas no tipo
    const typeClasses = {
        'success': 'alert-success',
        'error': 'alert-danger', // Usar alert-danger para consistência com Bootstrap/temas comuns
        'warning': 'alert-warning',
        'info': 'alert-info'
    };

    // Limpar classes anteriores
    alertDiv.className = 'alert';
    
    // Adicionar classe do tipo
    if (typeClasses[type]) {
        alertDiv.classList.add(typeClasses[type]);
    }

    // Definir ícones baseados no tipo
    const icons = {
        'success': '<i class="fas fa-check-circle"></i>',
        'error': '<i class="fas fa-exclamation-circle"></i>',
        'warning': '<i class="fas fa-exclamation-triangle"></i>',
        'info': '<i class="fas fa-info-circle"></i>'
    };

    // Definir conteúdo
    alertDiv.innerHTML = `
        ${icons[type] || ''}
        <span>${message}</span>
    `;

    // Mostrar o status
    statusDiv.style.display = 'block';

    // Esconder automaticamente após alguns segundos (exceto para success)
    if (type !== 'success') {
        setTimeout(() => {
            if (statusDiv.style.display === 'block') {
                statusDiv.style.display = 'none';
            }
        }, 5000);
    }

    // Também mostrar no toast para melhor UX
    if (typeof toastManager !== 'undefined') {
        switch (type) {
            case 'success':
                toastManager.success(message);
                break;
            case 'error':
                toastManager.error(message);
                break;
            case 'warning':
                toastManager.warning(message);
                break;
            default:
                toastManager.info(message);
        }
    }
}

// Função para iniciar checkout
async function initCheckout(productData) {
    console.log('🚀 Função initCheckout chamada com:', productData); // Log adicionado
    try {
        console.log('🚀 Iniciando checkout para:', productData.nome);
        showLoading(); // Mostrar loading ao iniciar o checkout
        
        // Validar dados do produto
        if (!productData || !productData.nome || !productData.preco || !productData.imagem) {
            console.error('Dados do produto incompletos:', productData);
            throw new Error('Dados do produto inválidos para iniciar o checkout.');
        }

        // Formatar preço para exibição
        const productPrice = parseFloat(productData.preco);
        const formattedPrice = productPrice.toLocaleString('pt-BR', {
            style: 'currency',
            currency: 'BRL'
        });

        // Atualizar informações do produto no modal
        document.getElementById('produto-imagem').src = productData.imagem;
        document.getElementById('produto-nome').textContent = productData.nome;
        const precoProduto = document.getElementById('produto-preco');
        precoProduto.textContent = formattedPrice;
        precoProduto.dataset.value = productPrice.toFixed(2);
        
        // Mostrar modal
        showModal();
        hideLoading(); // Esconder loading após dados do produto serem populados e modal visível

        // Default para cartão de crédito ou permitir que o usuário escolha
        // selectPaymentMethod('credit'); // Opcional: pré-selecionar um método
        
    } catch (error) {
        console.error('Erro ao inicializar checkout:', error);
        hideLoading();
        toastManager.error('Erro ao inicializar checkout. Tente novamente.');
        closeModal();
    }
}

// Função para gerar PIX
async function generatePix() {
    try {
        const email = document.getElementById('pix-email').value;
        if (!email) {
            toastManager.error('Por favor, informe seu email');
            return;
        }

        const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
        if (!emailRegex.test(email)) {
            toastManager.error('Por favor, informe um email válido');
            return;
        }

        showLoading();
        const productName = document.getElementById('produto-nome').textContent;
        const productPrice = parseFloat(document.getElementById('produto-preco').dataset.value);

        if (isNaN(productPrice) || productPrice <= 0) {
            throw new Error('Preço do produto inválido');
        }

        console.log('Dados do pagamento:', {
            nome: productName,
            preco: productPrice,
            email: email
        });

        const response = await fetch('/mercadopago/create_pix', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify({
                nome: productName,
                preco: productPrice,
                email: email
            })
        });

        const data = await response.json();
        
        if (!response.ok) {
            throw new Error(data.error || 'Erro ao gerar PIX');
        }
        
        // Mostrar QR Code
        document.getElementById('pix-qrcode').style.display = 'block';
        document.getElementById('pix-qrcode-image').src = `data:image/png;base64,${data.qr_code_base64}`;
        document.getElementById('pix-code').value = data.qr_code;
        
        hideLoading();
        toastManager.success('QR Code PIX gerado com sucesso!');
    } catch (error) {
        hideLoading();
        console.error('Erro:', error);
        toastManager.error(error.message || 'Erro ao gerar QR Code PIX');
    }
}

// Função para copiar código PIX
function copyPixCode() {
    const pixCode = document.getElementById('pix-code');
    pixCode.select();
    document.execCommand('copy');
    toastManager.success('Código PIX copiado!');
}

// Inicialização quando o DOM estiver pronto
document.addEventListener('DOMContentLoaded', function() {
    console.log('DOM carregado');

    // Event listeners para métodos de pagamento
    document.querySelectorAll('.payment-method').forEach(method => {
        method.addEventListener('click', function() {
            console.log('🖱️ Clique no método:', this.dataset.method);
            selectPaymentMethod(this.dataset.method);
        });

        // Adicionar suporte a teclado para acessibilidade
        method.addEventListener('keypress', function(e) {
            if (e.key === 'Enter' || e.key === ' ') {
                e.preventDefault();
                this.click();
            }
        });
    });

    // Event listener para gerar PIX
    const generatePixButton = document.getElementById('generate-pix-button');
    if (generatePixButton) {
        generatePixButton.addEventListener('click', generatePix);
    }

    // Event listener para o formulário de cartão de crédito (fallback se o onSubmit do SDK falhar)
    const creditCardFormElement = document.getElementById('form-checkout');
    if (creditCardFormElement) {
        creditCardFormElement.addEventListener('submit', function(event) {
            event.preventDefault();
            console.log('💨 Formulário de cartão submetido via event listener (fallback).');
            handleFormSubmit();
        });
    }

    // Event listener para copiar código PIX
    const copyPixButton = document.getElementById('copy-pix-button');
    if (copyPixButton) {
        copyPixButton.addEventListener('click', copyPixCode);
    }

    // Event listener para fechar modal
    const closeBtn = document.querySelector('.close');
    if (closeBtn) {
        closeBtn.addEventListener('click', closeModal);
    }

    // Event listener para clique fora do modal
    window.addEventListener('click', function(event) {
        const modal = document.getElementById('modalPagamento');
        if (event.target === modal) {
            closeModal();
        }
    });

    // Event listener para botões de compra
    document.querySelectorAll('.btn-comprar').forEach(btn => {
        btn.addEventListener('click', function(event) {
            console.log('🛍️ Botão Comprar clicado:', this.dataset.produtoNome); // Log adicionado
            event.preventDefault();
            const productData = {
                nome: this.dataset.produtoNome,
                preco: this.dataset.produtoPreco,
                imagem: this.dataset.produtoImagem
            };
            console.log('📦 Dados do produto para initCheckout:', productData); // Log adicionado
            initCheckout(productData);
        });
    });
});
</script>
</body>
</html>